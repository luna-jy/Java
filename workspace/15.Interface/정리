인터페이스 - 주로 메소드를 선언
기준이 되는 규칙을 정해둔다.
규칙에 맞게 작성하면 객체간에 연결이 잘 이루어진다

	<도형에 관련된 프로젝트를 생성>
	A씨는 직각삼각형 클래스 - 밑변, 높이, 넓이를 구한다
	B씨는 정사각형 클래스 - 한 변의 길이, 넓이를 구한다
	C씨는 원 클래스  - 반지름, 넓이를 구한다 
	D씨는 실행프로그램인 클래스 생성 
	----- 넓이를 구한다 : 각 도형마다 공식이 다르므로 구체화할 수 없다. → abstract() 추상메소드
			=> abstract double getArea();

※인터페이스의 특징
	1.	class가 아니라 interface로 선언한다.  ex) interface 인터페이스名 { }
	
	2.	추상메소드와 static final 필드(상수)만 선언 가능
		public abstract () 로 접근제한자 생략 가능 , public static final   생략 가능
	
	3.	생성자를 가질 수 없다. →객체 생성 불가
	
	4.	인터페이스가 가진 추상메소드는 반드시 오버라이딩해야만 한다. - public 으로!
		메소드 오버라이딩시 접근제어자는 원래 접근 제어자와 같거나 더 넓은 범위의 접근제어자만 지정 가능
	
	5.	서브클래스 extends 수퍼클래스	
		서브클래스 implements 인터페이스 
		서브클래스	extends 수퍼클래스 implements 인터페이스
	
	6.	다중 구현 가능 (상속은 다중 상속 불가 : extends 1, 2 ...불가능 )
		서브클래스 implements 인터페이스 1, 인터페이스2, 인터페이스3  	
	
	7.	인터페이스가 인터페이스를 다중상속	
		인터페이스 extends 인터페이스1, 인터페이스2, 인터페이스3
		
-----------
상품관리 프로그램
기본형태 -> 인터페이스를 사용해서 프로그램을 작성한다.
		