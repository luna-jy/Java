★Method (메소드)
	-클래스가 가지고 있는 행위 정보 (동작, 기능)를 표현하는 것→ 함수 (Function)
	-동작(기능)을 만들어 놓고 필요할 때 사용하기 위해서 호출 
	-캡슐화의 원칙 : 클래스 메소드를 구현, 하나의 클래스 안에는 여러개의 메소드가 존재
	
※클래스(*.java →*.class) 안에는 무엇이 들어가는가?
	-main() : 자바는 반드시 main()메소드에서 프로그램이 동작(실행)	▶ Main Class
	-상태정보 : 변수 (필드)  ▶ DTO Class, VO Class, Java Beans
	-행위정보 : 메소드 (동작, 기능) ▶ DAO Class



★메소드의 형식 (메소드를 만드는 방법)
①		②	   ③	④	  (       ⑤       )
public static void getSum(int num1,int num2){	▶ 선언부 (프로토타입)
	~~메소드의 동작 구현(코드) ~~;				▶ 구현부 (body)
	⑥ return;									
}	

①접근 제어자 : public (접근 허용), private(정보 은닉: 내부만 접근 허용), protected , default
②한정자 : static (자동으로 메모리에 생성), 생략 (객체를 생성하여 접근), final (재정의가 불가)
③리턴타입 (반환값) : 메소드가 동작후에 최종적으로 만들어지는 결과값의 데이터 타입
	-리턴을 하지 않는 경우 : void ▶ 메소드 내에  (body{}) return 문이 없다. 
	-리턴을 하는 경우 : 리턴되는 데이터 타입 ▶메소드 내에 (body{}) return 문이 있다. 
④메소드 이름 (): 소문자로 시작, 키워드는 사용 불가 , 의미있게 작성, 변수명 작성 규칙과 동일
⑤매개변수 리스트 
	- 메소드가 동작하기 위해서 외부로부터 입력(전달)되는 데이터 목록
	- 목록의 개수가 여러개일 경우 comma(,)로 구분
	- 매개변수 = 인수, 인자, Parameter 
⑥return문 
	- 메소드가 동작을 완료한 후, 결과값을 호출한 쪽으로 넘기는 키워드
	- return 문이 있을 경우에는 반드시 리턴타입이 변경되어야 한다. (void 사용할 수 없다.)
	- return 문을 만나게 되면 return문  아래의 문장은 수행되지 않는다.
	
	

★실인수(메소드 호출)와 가인수(메소드 정의)간의 매개변수를 전달하는 규칙 : Parameter Passing Rule
	- 실인수와 가인수의 매개변수 개수가 같아야 한다. 
	- 실인수와 가인수의 매개변수 타입이 같아야 한다.
	- 실인수와 가인수의 매개변수 이름은 달라도 된다. 

	
	
	
★메소드 오버로딩(OverLoading)
	- 클래스 안에 같은 이름을 가지고 있는 메소드를 여러개 선언(정의)
	- 메소드의 이름은 반드시 같아야 한다. 
	- 매개 변수의 개수가 달라야 한다. 
	- 매개 변수의 개수가 같을 경우에는 매개변수의 타입 또는 순서가 달라야 한다. 
	예) public static void getSum(int x , int y ) {~~~~~~;}
	    public static void getSum(int x , int y , int z) {~~~~~~;}
	    public static void getSum(int x , double y ) {~~~~~~;}
	    public static void getSum(double x, int y ) {~~~~~~;}
		 	
		 	


	//홀수의 합
		public static int getOddSum(int num1, int num2) {
			int oddSum=0;
			for(int i = num1 ; i <=num2; i ++) { 
				if(i%2!=0) { 
					oddSum +=i;
					}//if
				}//for
			return oddSum;
		}//getOddSUm()
		
	//짝수의 합 
		public static int getEvenSum(int num1, int num2) {
			int evenSum=0;
			for(int i = num1 ; i <=num2; i ++) { 
				if(i%2!=0) { 
					evenSum +=i;
					}//if
				}//for
			return evenSum;
		}//getEvenSUm()		 	
	
	